#!/bin/bash
set -euo pipefail

# Load environment variables
source ../.env

# Check kill switch
if [[ "${HALT_PIPELINE}" == "true" ]]; then
    echo "‚ùå Pipeline halted via kill switch. Exiting."
    exit 1
fi

# Parse arguments
ISSUE_ID=""
SPEC_TEXT=""
BRANCH_NAME=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --issue)
            ISSUE_ID="$2"
            shift 2
            ;;
        --spec)
            SPEC_TEXT="$2"
            shift 2
            ;;
        --branch)
            BRANCH_NAME="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Determine spec source
if [[ -n "$ISSUE_ID" ]]; then
    echo "üìã Fetching issue #$ISSUE_ID from GitHub..."
    SPEC_TEXT=$(gh issue view "$ISSUE_ID" --json body -q .body)
elif [[ -z "$SPEC_TEXT" && -f "../spec.md" ]]; then
    echo "üìÑ Using spec.md file..."
    SPEC_TEXT=$(cat ../spec.md)
fi

if [[ -z "$SPEC_TEXT" ]]; then
    echo "‚ùå No spec provided. Use --issue ID or --spec 'text'"
    exit 1
fi

# Set branch name
if [[ -z "$BRANCH_NAME" ]]; then
    BRANCH_NAME="devin/feat-$(date +%s)"
fi

# Prepare LLM prompt
PROMPT=$(cat <<EOF
Generate a complete Next.js + TypeScript + Tailwind application based on this spec:

$SPEC_TEXT

Requirements:
1. Create pages/index.tsx with responsive design
2. Create api/hello.ts with testable endpoint
3. Add proper TypeScript types
4. Include Tailwind config
5. Add basic components structure
6. Ensure all code is production-ready

Output as JSON with this structure:
{
  "files": [
    {
      "path": "pages/index.tsx",
      "content": "..."
    },
    {
      "path": "api/hello.ts", 
      "content": "..."
    }
  ]
}
EOF
)

# Call LLM (Claude or fallback)
echo "ü§ñ Generating code scaffold..."
if [[ "${USE_CLAUDE:-false}" == "true" ]]; then
    RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
        -H "x-api-key: $OPENAI_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -H "content-type: application/json" \
        -d "{
            \"model\": \"claude-3-opus-20240229\",
            \"max_tokens\": 8192,
            \"messages\": [{\"role\": \"user\", \"content\": \"$PROMPT\"}]
        }" | jq -r '.content[0].text')
else
    RESPONSE=$(curl -s http://localhost:11434/api/generate \
        -d "{
            \"model\": \"phi3:mini\",
            \"prompt\": \"$PROMPT\",
            \"stream\": false
        }" | jq -r '.response')
fi

# Parse and write files
echo "üìù Writing scaffold files..."
echo "$RESPONSE" | jq -r '.files[] | "echo \(.content | @base64d) > \(.path)"' | bash

# Git operations
echo "üåø Creating branch $BRANCH_NAME..."
git checkout -b "$BRANCH_NAME"
git add .
git commit -m "feat: scaffold application from spec

Generated by Devin autonomous agent
Spec source: ${ISSUE_ID:-inline}
"

# Push if remote exists
if git remote get-url origin &>/dev/null; then
    git push -u origin "$BRANCH_NAME"
    echo "‚úÖ Pushed to $BRANCH_NAME"
else
    echo "‚ö†Ô∏è  No remote configured, skipping push"
fi

echo "üéâ Scaffold complete! Branch: $BRANCH_NAME"